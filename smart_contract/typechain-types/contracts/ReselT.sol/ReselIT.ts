/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ReselIT {
  export type ListedTicketStruct = {
    eventAddress: AddressLike;
    tokenId: BigNumberish;
    price: BigNumberish;
    seller: AddressLike;
  };

  export type ListedTicketStructOutput = [
    eventAddress: string,
    tokenId: bigint,
    price: bigint,
    seller: string
  ] & { eventAddress: string; tokenId: bigint; price: bigint; seller: string };
}

export interface ReselITInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allListings"
      | "buyTicketFromEvent"
      | "buyTicketResale"
      | "delistTicket"
      | "getAllListings"
      | "listTicket"
      | "listings"
      | "onERC721Received"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TicketBought" | "TicketDelisted" | "TicketListed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicketFromEvent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicketResale",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistTicket",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listTicket",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTicketFromEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTicketResale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
}

export namespace TicketBoughtEvent {
  export type InputTuple = [
    eventAddress: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish,
    buyer: AddressLike
  ];
  export type OutputTuple = [
    eventAddress: string,
    tokenId: bigint,
    price: bigint,
    buyer: string
  ];
  export interface OutputObject {
    eventAddress: string;
    tokenId: bigint;
    price: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketDelistedEvent {
  export type InputTuple = [
    eventAddress: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike
  ];
  export type OutputTuple = [
    eventAddress: string,
    tokenId: bigint,
    seller: string
  ];
  export interface OutputObject {
    eventAddress: string;
    tokenId: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketListedEvent {
  export type InputTuple = [
    eventAddress: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish,
    seller: AddressLike
  ];
  export type OutputTuple = [
    eventAddress: string,
    tokenId: bigint,
    price: bigint,
    seller: string
  ];
  export interface OutputObject {
    eventAddress: string;
    tokenId: bigint;
    price: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReselIT extends BaseContract {
  connect(runner?: ContractRunner | null): ReselIT;
  waitForDeployment(): Promise<this>;

  interface: ReselITInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allListings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        eventAddress: string;
        tokenId: bigint;
        price: bigint;
        seller: string;
      }
    ],
    "view"
  >;

  buyTicketFromEvent: TypedContractMethod<
    [eventAddress: AddressLike],
    [void],
    "payable"
  >;

  buyTicketResale: TypedContractMethod<
    [eventAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  delistTicket: TypedContractMethod<
    [eventAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllListings: TypedContractMethod<
    [],
    [ReselIT.ListedTicketStructOutput[]],
    "view"
  >;

  listTicket: TypedContractMethod<
    [eventAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        eventAddress: string;
        tokenId: bigint;
        price: bigint;
        seller: string;
      }
    ],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allListings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        eventAddress: string;
        tokenId: bigint;
        price: bigint;
        seller: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "buyTicketFromEvent"
  ): TypedContractMethod<[eventAddress: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "buyTicketResale"
  ): TypedContractMethod<
    [eventAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "delistTicket"
  ): TypedContractMethod<
    [eventAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllListings"
  ): TypedContractMethod<[], [ReselIT.ListedTicketStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "listTicket"
  ): TypedContractMethod<
    [eventAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        eventAddress: string;
        tokenId: bigint;
        price: bigint;
        seller: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "view"
  >;

  getEvent(
    key: "TicketBought"
  ): TypedContractEvent<
    TicketBoughtEvent.InputTuple,
    TicketBoughtEvent.OutputTuple,
    TicketBoughtEvent.OutputObject
  >;
  getEvent(
    key: "TicketDelisted"
  ): TypedContractEvent<
    TicketDelistedEvent.InputTuple,
    TicketDelistedEvent.OutputTuple,
    TicketDelistedEvent.OutputObject
  >;
  getEvent(
    key: "TicketListed"
  ): TypedContractEvent<
    TicketListedEvent.InputTuple,
    TicketListedEvent.OutputTuple,
    TicketListedEvent.OutputObject
  >;

  filters: {
    "TicketBought(address,uint256,uint256,address)": TypedContractEvent<
      TicketBoughtEvent.InputTuple,
      TicketBoughtEvent.OutputTuple,
      TicketBoughtEvent.OutputObject
    >;
    TicketBought: TypedContractEvent<
      TicketBoughtEvent.InputTuple,
      TicketBoughtEvent.OutputTuple,
      TicketBoughtEvent.OutputObject
    >;

    "TicketDelisted(address,uint256,address)": TypedContractEvent<
      TicketDelistedEvent.InputTuple,
      TicketDelistedEvent.OutputTuple,
      TicketDelistedEvent.OutputObject
    >;
    TicketDelisted: TypedContractEvent<
      TicketDelistedEvent.InputTuple,
      TicketDelistedEvent.OutputTuple,
      TicketDelistedEvent.OutputObject
    >;

    "TicketListed(address,uint256,uint256,address)": TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;
    TicketListed: TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;
  };
}
